" ----------------------------------------------------------------------------
" Vim Plug
" ----------------------------------------------------------------------------

" Configuration
if has("win32")
  let g:vim_home_path = "~/vimfiles"
else
  let g:vim_home_path = "~/.vim"
endif

" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

                                                                 " == General ==
Plug 'junegunn/seoul256.vim'                                     " Colorscheme
Plug 'gmarik/vundle'                                             " Install Vundle
Plug 'bling/vim-airline'                                         " Powerline in Vimscript
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }           " Directory explorer
Plug 'jistr/vim-nerdtree-tabs', { 'on': 'NERDTreeToggle' }       " Tabs for nerdtree
Plug 'scrooloose/syntastic'                                      " Syntax checker
Plug 'tpope/vim-surround'                                        " Quickly surround words with symbols
Plug 'tpope/vim-obsession'                                       " Vim sessions
Plug 'christoomey/vim-tmux-navigator'                            " Doh! That's a Tmux split (no longer!)
Plug 'airblade/vim-gitgutter'                                    " Shows Git diff
Plug 'flazz/vim-colorschemes'                                    " Nice syntax highlighting
Plug 'Lokaltog/vim-easymotion'                                   " Move around better
Plug 'majutsushi/tagbar'                                         " Tags
Plug 'mileszs/ack.vim'                                           " Awk/Ag search
Plug 'Shougo/unite.vim'                                          " Unite
Plug 'Shougo/neomru.vim'
Plug 'chrisbra/vim-diff-enhanced'                                " Smarter diffing
Plug 'blueyed/vim-diminactive'                                   " Dim inactive window (could be very slow)
Plug 'Raimondi/delimitMate'                                      " Autocomplete for punctuation
Plug 'ervandew/supertab'                                         " Tab autocomplete
Plug 'tpope/vim-fugitive'                                        " Git wrapper
Plug 'ntpeters/vim-better-whitespace'                            " Highlight whitespace
Plug 'AndrewRadev/linediff.vim'                                  " Line diffs
Plug 'mikker/seoul256-iTerm'                                     " Seoul iTerm
Plug 'powerline/fonts'                                           " Powerline fonts (Sauce Code Powerline Regular)
Plug 'tomtom/tcomment_vim'                                       " comment/uncomment
Plug 'junegunn/fzf.vim'                                          " FZF plugin for Vim
Plug 'junegunn/goyo.vim'                                         " Page layout
Plug 'junegunn/vim-easy-align'                                   " Aligning columns
                                                                 " == Javascript ==
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }          " Javascript
Plug 'walm/jshint.vim', { 'for': 'javascript' }                  " I can haz good JS style?
Plug 'douglascrockford/JSLint', { 'for': 'javascript' }
Plug 'burnettk/vim-angular', { 'for': 'javascript' }             " Angular
                                                                 " == HTML ==
Plug 'htacg/tidy-html5', { 'do': 'make install', 'for': 'html' } " HTML5 syntax
Plug 'mattn/emmet-vim', { 'for': 'html' }                        " Expanding HTML abbreviations
                                                                 " == CSS ==
Plug 'groenewege/vim-less', { 'for': 'less' }                    " syntax highlighting for LESS
Plug 'ap/vim-css-color', { 'for': 'css' }                        " Highligh CSS colors
Plug 'craigemery/vim-autotag'                                    " Auto update ctags
Plug 'wavded/vim-stylus', { 'for': 'styl' }                      " Stylus files
Plug 'mxw/vim-jsx', { 'for': ['js', 'jsx'] }                     " ReactJS

" Initialize plugin system
call plug#end()



" ---------------------------------------------------------------------------
" COLOR SCHEME
" ---------------------------------------------------------------------------
colorscheme seoul256
let g:seoul256_background = 236
colo seoul256

"highlight OverLength      ctermbg=red
highlight ColorColumn     ctermbg=darkgray
highlight ExtraWhitespace ctermbg=red guibg=red



"------------------------------------------------
" Plugin settings
"------------------------------------------------

"" Emmet
let g:user_emmet_leader_key='<C-G>'

"" Unite
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

"" Airline settings
autocmd User AirlineAfterInit call AirlineInit()
function! AirlineInit()
  " Powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''

  " Sections
  let g:airline_inactive_collapse = 1
  let g:airline_section_b = airline#section#create([])
  let g:airline_section_c = airline#section#create(['%{getcwd()}', '/', '%t'])
  let g:airline_section_x = airline#section#create_right([])
  let g:airline_section_y = airline#section#create_right(['%p%%', '%c'])
  let g:airline_section_z = airline#section#create_right(['branch'])
  let g:airline_section_warning = airline#section#create_right(['syntastic'])

  " Tmuxline
  let g:airline#extensions#tmuxline#enabled = 1
endfunction

"" NerdTree settings
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
map <Leader>t :NERDTreeToggle<Enter>

"" Synstastic settings
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_python_checkers = ['pylint', 'flake8']
let g:syntastic_python_flake8_args = '--config ~/.flake8'
let g:syntastic_python_pylint_args = '--rcfile .pylintrc --load-plugins pylint_django --msg-template="{path}:{line}: [{msg_id}] {msg}" -r n'
let g:syntastic_aggregate_errors = 1
let g:syntastic_javascript_checkers = ['jshint', 'gjslint']
let g:syntastic_html_tidy_exec = '~/.vim/bundle/tidy-html5/bin/tidy'
let g:syntastic_html_tidy_ignore_errors=['proprietary attribute', 'trimming empty <']

"" Autoequalize splits
autocmd VimResized * wincmd =

"" Easymotion
nmap <Leader>s <Plug>(easymotion-s2)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0
let g:EasyMotion_smartcase = 1

"" Tags
nmap <F8> :TagbarToggle<CR>

"" Awk/Ag
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
if executable('ack')
  set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
  set grepformat=%f:%l:%c:%m
endif
if executable('ag')
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m
endif

"" Indent Guide
let g:indent_guides_guide_size = 1

let g:NERDTreeDirArrows = 0

"" Vim Diminactive
let g:diminactive_use_colorcolumn = 0
let g:diminactive_use_syntax = 1

"" Vim Fugitive
set diffopt+=vertical

"" EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)



" ----------------------------------------------------------------------------
" Large files
" ----------------------------------------------------------------------------
" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
  autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
  " no syntax highlighting etc
  set eventignore+=FileType
  " save memory when other file is viewed
  setlocal bufhidden=unload
  " is read-only (write with :w new_filename)
  setlocal buftype=nowrite
  " no undo possible
  setlocal undolevels=-1
  " display message
  autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction
